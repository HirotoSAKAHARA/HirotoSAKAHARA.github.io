@startuml kind_of_ai
skinparam backgroundColor transparent
人工知能 <|-- ルールベース制御 
人工知能 <|-- 機械学習
機械学習 <|-- 遺伝的アルゴリズム
機械学習 <|-- サポートベクターマシン
機械学習 <|-- ニューラルネットワーク
ニューラルネットワーク <|-- パーセプトロン
ニューラルネットワーク <|-- 深層学習
深層学習<|-- CNN
深層学習<|-- RNN
@enduml


@startuml learning_procedure
start
repeat
fork
: データを取得する;
: データインジェスチョン;
: データクレンジング;
: データを評価データと検証データ、テストデータに分割;
fork again
: 学習モデルの作成;
end fork
: 訓練データにてモデルパラメータを学習;
: 検証データにて評価;
repeat while(十分な性能だと判断)
: テストデータにて評価;
: モデルをデプロイする;
stop
skinparam backgroundColor transparent
@enduml


@startuml reinforcement_learning
() "行動"
() "状態"
() "報酬"
[エージェント] ..> 行動
行動 ..> [環境]
[エージェント] <.. 状態
状態 <.. [環境]
[エージェント] <.. 報酬
報酬 <.. [環境]
@enduml

@startuml marcov_decision_process
"S0" -down-> "a0(S0)"
"S0" -right-> "a1(S0)"

"a0(S0)" -up->[0.5( 0)] "S0"
"a0(S0)" -down->[0.5( 0)] "S2"

"a1(S0)" -down->[0.9( 0)] "S2"

"S1" -left-> "a0(S1)"
"S1" -down-> "a1(S1)"

"a0(S1)" -left->[0.7(+5)] "S0"
"a0(S1)" -->[0.1( 0)] "S1"
"a0(S1)" -down->[0.2( -)] "S2"

"a1(S1)" -->[0.95( 0)] "S1"
"a1(S1)" -->[0.05(+2)] "S2"

"S2" -up-> "a0(S2)"
"S2" -right-> "a1(S2)"

"a0(S2)" -up->[0.4( 0)] "S0"
"a0(S2)" -down->[0.6(+3)] "S2"

"a1(S2)" -->[0.3( 0)] "S0"
"a1(S2)" -up->[0.3(  0)] "S1"
"a1(S2)" -left->[0.4(  0)] "S2"

@enduml

@startuml decision_tree
start
:ルートノードに訓練データを入れる;
repeat
:各ノードにおいて、分割軸（特徴量）を決定する;
:各ノードにおいて、分割基準を決める;
:各ノードを基準によりツリーを複数に分ける;
:必要なノードの枝刈りをする;
repeat while(終了の判断をする)
stop
skinparam backgroundColor transparent
@enduml


@startuml random_forest 
start
:ルートノードに訓練データを入れる;
fork
: ルートのデータ群を
  ランダム抽出;
: 特徴量がランダムの
  決定木1を作成;
fork again
: ルートのデータ群を
  ランダム抽出;
: 特徴量がランダムの
  決定木2を作成;
fork again
: ルートのデータ群を
  ランダム抽出;
: 特徴量がランダムの
  決定木3を作成;
end fork
: 評価データを抽出し各ツリーに入力;
fork
: 決定木1の結果を計算;
fork again
: 決定木2の結果を計算;
fork again
: 決定木3の結果を計算;
end fork 
: 各ツリーの出力の多数決、あるいは平均値などを結果とする;
stop
skinparam backgroundColor transparent
@enduml

@startuml ada_boost
start
: 全データに等しい重みを付ける。;
repeat
: 重みづけられたデータを弱い学習機によって学習する。;
: 学習後データによって予測する。;
: 重みづけエラー率eを計算する。;
: 係数αを計算する。(α= 0.5 log((1-e)/e);
: 分類器の重みを計算する。w *= e^(α(i) * 教師値 * 推測値);
: 重みをすべて足して１になるように正規化する。;
repeat while(最後の分類器に達した)
: 重みを考慮した各分類器の結果の合計が0以上か以下かで分類;
stop

skinparam backgroundColor transparent
@enduml

@startuml CRISP-DM
hide empty description
[*] --> 1.ビジネス理解

1.ビジネス理解 -right-> 2.データ理解

2.データ理解 -left-> 1.ビジネス理解

2.データ理解 -right-> 3.データ準備

3.データ準備 -down-> 4.モデリング

4.モデリング -up-> 3.データ準備

4.モデリング -left-> 5.評価

5.評価 -up-> 1.ビジネス理解

5.評価 -left-> 6.適用

skinparam backgroundColor transparent
@enduml

@startuml kdd
hide empty description

データ -right-> 目的データ : データ \n 選択
目的データ -right-> 前処理後データ : データ \n 前処理 
前処理後データ -right-> 変換済みデータ : データ \n 変換
変換済みデータ -right-> パターン : データマイニング
パターン -right-> 知識 : 解釈・評価
知識 -right-> [*]
パターン -down-> 目的データ 
パターン -down-> 前処理後データ 
パターン -down-> 変換済みデータ 
skinparam backgroundColor transparent
@enduml

@startuml slam_procedure
start
:周囲データ取得;
:スキャン前処理;
:参照スキャン生成;
repeat
  :データ対応付け;
  :ロボット位置最適化;
repeat while(推定位置が収束したか) is (収束していない)
:センサ融合;
:地図生成;
end
skinparam backgroundColor transparent
@enduml



@startuml perceptron
skinparam backgroundColor transparet
(*) --> "x1"
(*) --> "x2"
(*) --> "x3"
(*) --> "x4"
"x1" --> "u = Σ(各入力の重み*値)+バイアス"
"x2" --> "u = Σ(各入力の重み*値)+バイアス"
"x3" --> "u = Σ(各入力の重み*値)+バイアス"
"x4" --> "u = Σ(各入力の重み*値)+バイアス"
"u = Σ(各入力の重み*値)+バイアス" --> "z = 1　(if u ＞ 0) 
z = 0　(if u ≦ 0)"
--> z
skinparam backgroundColor transparent
@enduml

@startuml neuron
(*) --> "x1"
(*) --> "x2"
(*) --> "x3"
(*) --> "x4"
"x1" --> "u = Σ(各入力の重み*値)+バイアス"
"x2" --> "u = Σ(各入力の重み*値)+バイアス"
"x3" --> "u = Σ(各入力の重み*値)+バイアス"
"x4" --> "u = Σ(各入力の重み*値)+バイアス"
"u = Σ(各入力の重み*値)+バイアス" --> "z = f(u) fは活性化関数"
--> z
skinparam backgroundColor transparent
@enduml


@startuml multi_layer_perceptron

===b1=== --> "input 1"
===b1=== --> "input 2"
===b1=== --> "input 3"

"input 1" --> "neuron 11"
"input 2" --> "neuron 12"
"input 3" --> "neuron 13"

"neuron 11" --> "neuron 21"
"neuron 11" --> "neuron 22"
"neuron 11" --> "neuron 23"
"neuron 11" --> "neuron 24"

"neuron 12" --> "neuron 21"
"neuron 12" --> "neuron 22"
"neuron 12" --> "neuron 23"
"neuron 12" --> "neuron 24"

"neuron 13" --> "neuron 21"
"neuron 13" --> "neuron 22"
"neuron 13" --> "neuron 23"
"neuron 13" --> "neuron 24"

"neuron 21" --> "neuron 31"
"neuron 21" --> "neuron 32"

"neuron 22" --> "neuron 31"
"neuron 22" --> "neuron 32"

"neuron 23" --> "neuron 31"
"neuron 23" --> "neuron 32"

"neuron 24" --> "neuron 31"
"neuron 24" --> "neuron 32"

"neuron 31" --> "output 1"
"neuron 32" --> "output 2"

skinparam backgroundColor transparent
@enduml

@startuml proedure
start
repeat
:入力層にデータを与える。;
:各ニューロンにおいて、入力と重みと活性化関数から、次の層の入力を算出する。;
:最後の中間層から得た入力と重みと活性化関数から、出力を算出する。;
:出力と教師データ、コスト関数から、誤差を算出する。;
:誤差と各層の重みから、重みの増減による誤差の増減を見積もる。;
:誤差の増減の見積りから、重みを変更する。;
repeat while(終了の判断をする)
stop
skinparam backgroundColor transparent
@endl

@startuml RNN_base

(*)  -right-> "h0"
"h0" -right->[W] "h1"
"h1" -up->[V] "y1"
"x1" -up->[U] "h1"
"h1" -right->[W] "h2"
"h2" -up->[V] "y2"
"x2" -up->[U] "h2"
"h2" -right->[W] "h3"
"h3" -up->[V] "y3"
"x3" -up->[U] "h3"
"h3" -right->[W] "h4"

skinparam backgroundColor transparent
@enduml

@startuml LSTM

(*) -right-> "h0"
(*) -right-> "y0"
"y0" -up-> " "
"x1" -up-> " "
" " -up-> "σ"
note left: "忘却ゲート(f)"
"σ" -up-> "x"
"h0" -right-> "x"
" " -right-> "   "
"   " -up-> " σ"
note top: "入力ゲート(i)"
"   " -up-> "tanh"
note top: "入力"
"   " -right-> " σ "
note top: "出力ゲート(o)"
" σ" -up-> " x"
"tanh" -up-> " x"
"x" -right-> "+"
" x" -up-> "+"
note top: "(c)"
" σ " -right-> " x "
"+" -right-> "  "
"  " -down-> " tanh"
" tanh" -down-> " x "
"  " -right-> "h1"
" x " -right-> "y1"
"h1" --> (*)
"y1" -up-> (*)
skinparam backgroundColor transparent
@enduml

" " -right-> "o2"
" " -right-> "tanh"
" " -right-> "o3"
"o2" -up-> "x2"
"tanh" -up-> "x2"
"x2" -up-> "+"
"x1" -right-> "+"
"o3" -right-> "x3"
"+" -right-> "c2"
"+" -right-> "tanh2"
"tanh2" -down-> "x3"
"x3" -right-> "y1"
